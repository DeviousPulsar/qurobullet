<?xml version="1.0" encoding="UTF-8" ?>
<class name="BulletServer" inherits="Node2D" version="4.4" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../../../doc/class.xsd">
	<brief_description>
		Node which creates, spawns, and processes a set pool of [Bullet] objects and reports their collisions.
	</brief_description>
	<description>
		Node which creates, spawns, and processes a set pool of [Bullet] objects and reports their collisions.
	</description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="clear_bullets">
			<return type="void" />
			<description>
				Pops all active bullets. Used to clear the board.
			</description>
		</method>
		<method name="get_live_bullet_count">
			<return type="int" />
			<description>
				Returns the number of bullets that are currently live.
			</description>
		</method>
		<method name="get_live_bullet_positions">
			<return type="Array" />
			<description>
				Returns an array containing the Vector2 positions of all currently live bullets.
			</description>
		</method>
		<method name="get_live_bullets">
			<return type="Array" />
			<description>
				Returns an array containing all currently live [Bullet] objects. 
				Returned array is a copy of the server's internal live bullet array. Modifying this array will have no effect on BulletServer's internal arrays, but modifications made to the [Bullet]s themselves will take effect in the game.
				Attempting to access or modify a bullet retreived by this method after resizing the bullet pool or destorying the bullet server leads to undefined behaviour.
			</description>
		</method>
		<method name="spawn_bullet">
			<return type="void" />
			<param index="0" name="path" type="BulletPath" />
			<param index="1" name="position" type="Vector2" />
			<param index="2" name="direction" type="Vector2" />
			<param index="3" name="texture" type="BulletTexture" />
			<param index="4" name="custom_data" type="Dictionary" />
			<description>
				Spawns a [Bullet] with the traits defined by [code]path[/code] and [code]texture[/code], at [code]position[/code], firing in [code]direction[/code].
				If every bullet in the bullet pool is currently active, the oldest active bullet is recycled and spawned instead. This does not pop the recycled bullets.
			</description>
		</method>
		<method name="spawn_volley">
			<return type="void" />
			<param index="0" name="path" type="BulletPath" />
			<param index="1" name="position" type="Vector2" />
			<param index="2" name="volley" type="Array" />
			<param index="3" name="texture" type="BulletTexture" />
			<param index="4" name="custom_data" type="Dictionary" />
			<description>
				Spawns a volley of [Bullet]s with the traits defined by [code]path[/code] and [code]texture[/code], originating at [code]position[/code], with their relative spawn positions and directions determined by [code]volley[/code].
				[code]volley[/code] is an [Array] of [Dictionary] items, each containing a "position" and "direction". You can build your own if you wish to spawn custom volleys.
				If every bullet in the bullet pool is currently active, the oldest active bullets are recycled and spawned instead. This does not pop the recycled bullets.
			</description>
		</method>
	</methods>
	<members>
		<member name="bullet_pool_size" type="int" setter="set_bullet_pool_size" getter="get_bullet_pool_size" default="1500">
			The total number of bullets managed by this server.
			A [BulletServer] generates all bullets on ready, and adds/removes them from play by cycling them between active and inactive groups. Spawning bullets pulls them from the inactive group and makes them active, and recycles the oldest active bullet if no inactive bullets are available.
		</member>
		<member name="max_collisions_per_bullet" type="int" setter="set_max_collisions_per_bullet" getter="get_max_collisions_per_bullet" default="32">
			The max number of collisions a single [Bullet] can detect in a single frame.
		</member>
		<member name="max_lifetime" type="float" setter="set_max_lifetime" getter="get_max_lifetime" default="0.0">
			The maximium lifetime of any [Bullet] managed by the server. Bullets older than this are automatically popped. Setting to 0.0 means bullets do not pop automatically from exceeding the server's max_lifetime.
		</member>
		<member name="play_area_allow_incoming" type="bool" setter="set_play_area_allow_incoming" getter="get_play_area_allow_incoming" default="true">
			If [code]true[/code], bullets outside of the play area will only be automatically popped if they are moving away from it.
			Bullets outside of the play area will not detect collisions.
			No bullet will be culled if a straight line path projected from it's current position with it's  current direction intersects the play area.
		</member>
		<member name="play_area_margin" type="float" setter="set_play_area_margin" getter="get_play_area_margin" default="0.0">
			The distance, in pixels, bullets controlled by this server can travel outside the the current [Viewport] before being popped. Can be negative.
		</member>
		<member name="play_area_mode" type="int" setter="set_play_area_mode" getter="get_play_area_mode" enum="BulletServer.AreaMode" default="0">
			The current mode used to define the play area's limits.
			[code]VIEWPORT[/code] causes the play area to automatically follow the current viewport, with a configurable margin.
			[code]MANUAL[/code] allows the play area's [Rect2] to be defined directly. Uses world coordinates.
			[code]INFINITE[/code] causes the play area to become infinite, and no bullet will pop based on location. Some other form of cleanup routine, such as [code]max_lifetime[/code], is recommended in this mode for best performance.
		</member>
		<member name="play_area_rect" type="Rect2" setter="set_play_area_rect" getter="get_play_area_rect" default="Rect2(0, 0, 0, 0)">
			The [Rect2] definining the limits for active bullets in the server. Any bullet outside of this rectangle on physics process may be automatically popped, depending on configuration.
		</member>
		<member name="pop_on_collide" type="bool" setter="set_pop_on_collide" getter="get_pop_on_collide" default="true">
			If [code]true[/code], bullets will be popped automatically if the server determines they have collided.
			Disable if you're implementing more nuanced bullet behaviour on collision, like reflection.
		</member>
		<member name="relay_autoconnect" type="bool" setter="set_relay_autoconnect" getter="get_relay_autoconnect" default="true">
			If [code]true[/code], this server will automatically connect to the [BulletServerRelay] singleton on ready. Provides effortless connection between spawner and server. 
			If disabled, you must manually connect spawning signals to this server's [code]spawn_bullet[/code] or [code]spawn_volley[/code] functions via script.
		</member>
	</members>
	<signals>
		<signal name="collisions_detected">
			<param index="0" name="collisions" type="Dictionary" />
			<description>
				Emitted in once a physics frame where a bullet has collided with an area or body.
				The collisions are returned as a dictionary where the keys are bullets that collided with something during the last physics frame, and the values are the colliders hit by the bullet stored as an array containing dictionaries with the following fields:
				[code]collider[/code]: The colliding object.
				[code]collider_id[/code]: The colliding object's ID.
				[code]rid[/code]: The intersecting object's RID.
				[code]shape[/code]: The shape index of the colliding shape.
				Note that [BulletServer] will report collisions even on unmonitorable collision shapes, so long as they're on the same layer.
			</description>
		</signal>
		<signal name="bullets_popped">
			<param index="0" name="bullet" type="Array" />
			<description>
				Emitted in once a physics frame where a popped bullet has been cleaned by the this server.
				The popped bullets are returned as a array containing dictionaries with the following fields:
				[code]time[/code]: The popped bullet's final age since spawn in seconds.
				[code]reason_popped[/code]: The reason that the bullet was popped as an enum value of type Bullet:State.
				[code]position[/code]: The popped bullet's final position.
				[code]path[/code]: The popped bullet's path.
				[code]texture[/code]: The popped bullet's texture.
				[code]custom_data[/code]: The popped bullet's custom_data feild.
			</description>
		</signal>
	</signals>
	<constants>
		<constant name="VIEWPORT" value="0" enum="State">
		</constant>
		<constant name="MANUAL" value="1" enum="State">
		</constant>
		<constant name="POPPED_OUT_OF_BOUNDS" value="2" enum="State">
		</constant>
		<constant name="POPPED_LIFETIME_SERVER" value="3" enum="State">
		</constant>
		<constant name="POPPED_LIFETIME_BULLET" value="4" enum="State">
		</constant>
		<constant name="POPPED_COLLIDE" value="5" enum="State">
		</constant>
		<constant name="POPPED_REQUESTED" value="6" enum="State">
		</constant>
	</constants>
</class>
