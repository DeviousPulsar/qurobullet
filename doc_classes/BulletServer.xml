<?xml version="1.0" encoding="UTF-8" ?>
<class name="BulletServer" inherits="Node2D" version="3.2">
	<brief_description>
		Node2D which controls a set pool of [Bullet]s and reports their collisions.
	</brief_description>
	<description>
		Node2D which controls a set pool of [Bullet]s and reports their collisions.
		A [BulletServer] in a scene will automatically connect to the [BulletServerRelay] singleton on ready, to receive spawning signals from any active [BulletSpawner] nodes.
	</description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="clear_bullets">
			<return type="void">
			</return>
			<description>
				Pops all active bullets. Used to clear the board.
			</description>
		</method>
		<method name="spawn_bullet">
			<return type="void">
			</return>
			<argument index="0" name="type" type="BulletType">
			</argument>
			<argument index="1" name="position" type="Vector2">
			</argument>
			<argument index="2" name="direction" type="Vector2">
			</argument>
			<description>
				Spawns a [Bullet] of [code]type[/code] at [code]position[/code], firing in [code]direction[/code].
				If every bullet in the bullet pool is currently active, the oldest active bullet is recycled and spawned instead.
			</description>
		</method>
		<method name="spawn_volley">
			<return type="void">
			</return>
			<argument index="0" name="type" type="BulletType">
			</argument>
			<argument index="1" name="position" type="Vector2">
			</argument>
			<argument index="2" name="volley" type="Array">
			</argument>
			<description>
				Spawns a volley of [Bullet]s of [code]type[/code], originating at [code]position[/code], with their relative spawn positions and directions determined by Spawns a [Bullet] of [code]type[/code] at [code]position[/code] from the bullet pool, firing in [code]volley[/code].
				[code]volley[/code] is an [Array] of [Dictionary] items, each containing a "position" and "direction". You can build your own if you wish to spawn custom volleys.
			</description>
		</method>
	</methods>
	<members>
		<member name="bullet_pool_size" type="int" setter="set_bullet_pool_size" getter="get_bullet_pool_size" default="1500">
			The total number of bullets managed by this server.
			A [BulletServer] generates all bullets on ready, and adds/removes them from play by cycling them between active and inactive groups. Spawning bullets pulls them from the inactive group and makes them active, and recycles the oldest active bullet if no inactive bullets are available.
		</member>
		<member name="max_lifetime" type="float" setter="set_max_lifetime" getter="get_max_lifetime" default="0.0">
			The maximium lifetime of any [Bullet] managed by the server. Bullets older than this are automatically popped.
		</member>
		<member name="play_area_allow_incoming" type="bool" setter="set_play_area_allow_incoming" getter="get_play_area_allow_incoming" default="false">
			If [code]true[/code], bullets outside of the play area will only be automatically popped if they are moving away from it.
			Bullets outside of the play area will not detect collisions.
			Calculation of whether bullet is "incoming" is approximate, and based on its angle to the center of the play area, so bullets that would enter a corner of the play area at an oblique angle may still be popped.
		</member>
		<member name="play_area_margin" type="float" setter="set_play_area_margin" getter="get_play_area_margin" default="0.0">
			The distance, in pixels, bullets controlled by this server can travel outside the the current [Viewport] before being popped. Can be negative.
		</member>
		<member name="pop_on_collide" type="bool" setter="set_pop_on_collide" getter="get_pop_on_collide" default="true">
			If [code]true[/code], bullets will be popped automatically if the server determines they have collided.
			Disable if you're implementing more nuanced bullet behaviour on collision, like reflection.
		</member>
		<member name="relay_autoconnect" type="bool" setter="set_relay_autoconnect" getter="get_relay_autoconnect" default="true">
			If [code]true[/code], this server will automatically connect to the [BulletServerRelay] singleton on ready. Provides effortless connection between spawner and server. 
			If disabled, you must manually connect spawning signals to this server's [code]spawn_bullet[/code] or [code]spawn_volley[/code] functions via script.
		</member>
	</members>
	<signals>
		<signal name="collision_detected">
			<argument index="0" name="bullet" type="Bullet">
			</argument>
			<argument index="1" name="colliders" type="Array">
			</argument>
			<description>
				Emitted when a bullet has collided with an area or body. Contains the [Bullet] which collided and an [Array] of the collision objects it collided with.
				Note that [BulletServer] will report collisions even with unmonitorable collision shapes, so long as they're on the same layer.
			</description>
		</signal>
	</signals>
	<constants>
	</constants>
</class>
